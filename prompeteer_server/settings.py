from datetime import timedelta
from pathlib import Path
import os

# --- Early .env loader (supports lines starting with `set `) ---
BASE_DIR = Path(__file__).resolve().parent.parent

def _load_simple_env(env_path: Path):
    try:
        with env_path.open('r', encoding='utf-8') as fh:
            for raw in fh:
                line = raw.strip()
                if not line or line.startswith('#'):
                    continue
                if line.lower().startswith('set '):  # Windows style in provided .env
                    line = line[4:].strip()
                if '=' not in line:
                    continue
                k, v = line.split('=', 1)
                k = k.strip()
                v = v.strip().strip('"').strip("'")
                # Don't override if already exported in real environment
                if k and k not in os.environ:
                    os.environ[k] = v
    except FileNotFoundError:
        pass

_load_simple_env(BASE_DIR / '.env')
# ---------------------------------------------------------------

# Read env AFTER loading
GOOGLE_OAUTH_CLIENT_ID = os.getenv('GOOGLE_OAUTH_CLIENT_ID','')
GOOGLE_OAUTH_CLIENT_SECRET = os.getenv('GOOGLE_OAUTH_CLIENT_SECRET','')
GOOGLE_OAUTH_REDIRECT_URI = os.getenv('GOOGLE_OAUTH_REDIRECT_URI','')
GOOGLE_OAUTH_REDIRECT_URI_SSR = os.getenv('GOOGLE_OAUTH_REDIRECT_URI_SSR','')

# Provide local dev fallbacks if still empty (avoids 400 during manual tests)
if not GOOGLE_OAUTH_REDIRECT_URI:
    GOOGLE_OAUTH_REDIRECT_URI = 'http://127.0.0.1:8000/api/v1/auth_api/google/callback/'
if not GOOGLE_OAUTH_REDIRECT_URI_SSR:
    GOOGLE_OAUTH_REDIRECT_URI_SSR = 'http://127.0.0.1:8000/api/v1/auth_api/google/callback/ssr/'

# Normalize: Django URL patterns include trailing slash, so ensure env values do too
if GOOGLE_OAUTH_REDIRECT_URI and not GOOGLE_OAUTH_REDIRECT_URI.endswith('/'):
    GOOGLE_OAUTH_REDIRECT_URI = GOOGLE_OAUTH_REDIRECT_URI + '/'
if GOOGLE_OAUTH_REDIRECT_URI_SSR and not GOOGLE_OAUTH_REDIRECT_URI_SSR.endswith('/'):
    GOOGLE_OAUTH_REDIRECT_URI_SSR = GOOGLE_OAUTH_REDIRECT_URI_SSR + '/'

BACKEND_PASSWORD_SALT = os.getenv('BACKEND_PASSWORD_SALT','fallback_dev_salt')

"""
Django settings for prompeteer_server project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'fallback_dev_key')



# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [
    'itse500-ok.ly',
    'www.itse500-ok.ly',
    'www.itse500-ok.ly',
    '157.230.29.188',
    'localhost',
]


# Application definition

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'USER_ID_FIELD': 'user_id',  # Match the primary key field in Custom_User
    'USER_ID_CLAIM': 'user_id',  # Ensure the claim in the token matches the field
}

AUTH_USER_MODEL = 'user_mang.Custom_User'


INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'auth_api',
    'channels', # for real-time mssgs
    "user_mang",
    "chat_api",
    "crypto_api",
    "rest_framework",
    
]

""" CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379) ],  # Redis server address
        },
    },
} """

# Dynamically create log file path within the app's directory
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'with_newline': {
            '()': 'logging.Formatter',
            'format': '%(asctime)s\t|\t%(levelname)s\t|\t%(name)s\t|\t%(message)s',
        },
        'a4_wrap': {
            '()': 'prompeteer_server.utils.logging.A4WrapFormatter',
            'format': '%(asctime)s\t|\t%(levelname)s\t|\t%(name)s\t|\t%(message)s',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'user_mang.log'),
            'formatter': 'a4_wrap',
        },
        'chat_api_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'chat_api.log'),
            'formatter': 'a4_wrap',
        },
        'conversation_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'conversation.log'),
            'formatter': 'a4_wrap',
        },
        'auth_api_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'auth_api.log'),
            'formatter': 'a4_wrap',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'auth_api': {
            'handlers': ['auth_api_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'user_mang': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'chat_api': {
            'handlers': ['chat_api_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'conversation': {
            'handlers': ['conversation_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

"""
"default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
    """
ASGI_APPLICATION = "prompeteer_server.asgi.application"

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'prompeteer_server.middleware.DebugHeadersMiddleware',
]
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000", 
    "http://127.0.0.1:3000",

]


ROOT_URLCONF = 'prompeteer_server.urls'



TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'prompeteer_server' / 'static' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'prompeteer_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    
        'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
    }


#sqlite db
"""
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # Use django-pgvector engine
        'NAME': os.environ.get('DB_NAME', 'prompeteer_db'),  # Database name
        'USER': os.environ.get('DB_USER', 'prompeteer_user'),  # Database user
        'PASSWORD': os.environ.get('DB_PASSWORD', 'prompeteer_password'),  # Database password
        'HOST': os.environ.get('DB_HOST', '127.0.0.1'),  # Database host
        'PORT': os.environ.get('DB_PORT', '5432'),  # Database port
        'OPTIONS': {
            'sslmode': 'require' if os.environ.get('DB_SSL', 'False') == 'True' else None,
        },
"""
import secrets
# Backend password salt for custom authentication
BACKEND_PASSWORD_SALT = os.environ.get('BACKEND_PASSWORD_SALT', secrets.token_urlsafe(32))

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
# Directory where collectstatic will collect static files for production
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media (uploaded encrypted blobs)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

# *django doesn't accept uuid as it is not a subclass of AutoField
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

SIMPLE_JWT = {
    "USER_ID_FIELD":"user_id",
    "USER_ID_CLAIM": "user_id",
}
